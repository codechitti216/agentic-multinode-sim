# Auto-generated by Manus: Chaos Triage Arena scaffold

import pytest
import json
import time
from fastapi.testclient import TestClient
from unittest.mock import Mock, patch

# Import the dashboard API
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from dashboard_api import DashboardAPI


@pytest.fixture
def client():
    """Create test client"""
    dashboard = DashboardAPI(host="127.0.0.1", port=8000)
    return TestClient(dashboard.app)


@pytest.fixture
def mock_super_tool():
    """Mock SuperTool for testing"""
    with patch('dashboard_api.SuperTool') as mock:
        mock_instance = Mock()
        mock_instance.get_all_statuses.return_value = {
            "test_service": {
                "running": True,
                "healthy": True,
                "pid": 12345,
                "port": 8001,
                "health_reason": "Healthy via /healthz"
            }
        }
        mock_instance.get_all_metrics.return_value = {
            "test_service": {
                "cpu_percent": 25.5,
                "memory_mb": 128.0,
                "timestamp": time.time()
            }
        }
        mock_instance.get_action_history.return_value = [
            {
                "service": "test_service",
                "action": "start",
                "elapsed": 1.5,
                "timestamp": time.time(),
                "result": {"ok": True}
            }
        ]
        mock_instance.get_action_metrics.return_value = {
            "test_service": {
                "count": 1,
                "avg_duration": 1.5,
                "max_duration": 1.5,
                "min_duration": 1.5
            }
        }
        mock_instance.start_service.return_value = {"ok": True, "pid": 12345}
        mock_instance.stop_service.return_value = {"ok": True, "message": "Service stopped"}
        mock.return_value = mock_instance
        yield mock_instance


def test_api_health(client):
    """Test /api/health endpoint"""
    response = client.get("/api/health")
    assert response.status_code == 200
    
    data = response.json()
    assert "status" in data
    assert data["status"] == "healthy"
    assert "timestamp" in data


def test_api_status(client, mock_super_tool):
    """Test /api/status endpoint"""
    response = client.get("/api/status")
    assert response.status_code == 200
    
    data = response.json()
    assert "test_service" in data
    assert data["test_service"]["running"] is True
    assert data["test_service"]["healthy"] is True


def test_api_metrics(client, mock_super_tool):
    """Test /api/metrics endpoint"""
    response = client.get("/api/metrics")
    assert response.status_code == 200
    
    data = response.json()
    assert "test_service" in data
    assert "cpu_percent" in data["test_service"]
    assert "memory_mb" in data["test_service"]


def test_api_action_history(client, mock_super_tool):
    """Test /api/action-history endpoint"""
    response = client.get("/api/action-history")
    assert response.status_code == 200
    
    data = response.json()
    assert "history" in data
    assert len(data["history"]) > 0
    
    action = data["history"][0]
    assert "service" in action
    assert "action" in action
    assert "elapsed" in action
    assert "timestamp" in action


def test_api_action_metrics(client, mock_super_tool):
    """Test /api/action-metrics endpoint"""
    response = client.get("/api/action-metrics")
    assert response.status_code == 200
    
    data = response.json()
    assert "test_service" in data
    assert "count" in data["test_service"]
    assert "avg_duration" in data["test_service"]


def test_start_service_action(client, mock_super_tool):
    """Test starting a service"""
    response = client.post("/api/actions/start/test_service")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.start_service.assert_called_once_with("test_service")


def test_stop_service_action(client, mock_super_tool):
    """Test stopping a service"""
    response = client.post("/api/actions/stop/test_service")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.stop_service.assert_called_once_with("test_service")


def test_kill_service_action(client, mock_super_tool):
    """Test killing a service"""
    mock_super_tool.kill_service.return_value = {"ok": True, "message": "Service killed"}
    
    response = client.post("/api/actions/kill/test_service")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.kill_service.assert_called_once_with("test_service")


def test_inject_failure_action(client, mock_super_tool):
    """Test injecting failure"""
    mock_super_tool.inject_failure.return_value = {"ok": True, "via": "service"}
    
    response = client.post("/api/actions/inject/test_service/logical_failure")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.inject_failure.assert_called_once_with("test_service", "logical_failure")


def test_set_latency_action(client, mock_super_tool):
    """Test setting latency"""
    mock_super_tool.set_latency.return_value = {"ok": True, "via": "service"}
    
    response = client.post("/api/actions/latency/test_service/500")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.set_latency.assert_called_once_with("test_service", 500)


def test_cpu_stress_action(client, mock_super_tool):
    """Test CPU stress"""
    mock_super_tool.cpu_stress.return_value = {"ok": True, "via": "service"}
    
    response = client.post("/api/actions/cpu-stress/test_service/70")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.cpu_stress.assert_called_once_with("test_service", 70)


def test_memory_leak_action(client, mock_super_tool):
    """Test memory leak"""
    mock_super_tool.memory_leak.return_value = {"ok": True, "via": "service"}
    
    response = client.post("/api/actions/memory-leak/test_service/200")
    assert response.status_code == 200
    
    data = response.json()
    assert data["ok"] is True
    mock_super_tool.memory_leak.assert_called_once_with("test_service", 200)


def test_dashboard_root(client):
    """Test dashboard root endpoint"""
    response = client.get("/")
    assert response.status_code == 200
    # Should return HTML content or error message about missing dashboard


def test_json_response_format(client, mock_super_tool):
    """Test that JSON responses are properly formatted"""
    response = client.get("/api/status")
    assert response.status_code == 200
    assert response.headers["content-type"] == "application/json"
    
    # Should be valid JSON
    data = response.json()
    assert isinstance(data, dict)


def test_error_handling(client, mock_super_tool):
    """Test error handling in actions"""
    mock_super_tool.start_service.return_value = {"ok": False, "error": "Service not found"}
    
    response = client.post("/api/actions/start/nonexistent_service")
    assert response.status_code == 200  # API returns 200 but with error in JSON
    
    data = response.json()
    assert data["ok"] is False
    assert "error" in data


if __name__ == "__main__":
    pytest.main([__file__, "-v"])

