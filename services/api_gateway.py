# Auto-generated by Manus: Chaos Triage Arena scaffold

from base_service import BaseService
from fastapi import HTTPException


class APIGatewayService(BaseService):
    def __init__(self):
        super().__init__("api_gateway", 8001, ["user_service", "payment_service"])
        self._setup_gateway_routes()
    
    def _setup_gateway_routes(self):
        @self.app.get("/api/users")
        async def get_users():
            # Call user service
            try:
                users = self.call_dependency("user_service", "/users")
                return {"gateway": "api_gateway", "data": users}
            except HTTPException as e:
                raise e
        
        @self.app.get("/api/payments")
        async def get_payments():
            # Call payment service
            try:
                payments = self.call_dependency("payment_service", "/payments")
                return {"gateway": "api_gateway", "data": payments}
            except HTTPException as e:
                raise e
        
        @self.app.post("/api/process-payment")
        async def process_payment():
            # Call both user and payment services
            try:
                user_check = self.call_dependency("user_service", "/validate")
                payment_result = self.call_dependency("payment_service", "/process")
                return {
                    "gateway": "api_gateway",
                    "user_validation": user_check,
                    "payment_result": payment_result
                }
            except HTTPException as e:
                raise e


if __name__ == "__main__":
    service = APIGatewayService()
    service.run()

