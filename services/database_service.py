# Auto-generated by Manus: Chaos Triage Arena scaffold

from base_service import BaseService
import time
import random


class DatabaseService(BaseService):
    def __init__(self):
        super().__init__("database_service", 8002, [])
        self.data_store = {
            "users": [
                {"id": 1, "name": "Alice", "email": "alice@example.com"},
                {"id": 2, "name": "Bob", "email": "bob@example.com"}
            ],
            "payments": [
                {"id": 1, "user_id": 1, "amount": 100.0, "status": "completed"},
                {"id": 2, "user_id": 2, "amount": 50.0, "status": "pending"}
            ]
        }
        self._setup_database_routes()
    
    def _setup_database_routes(self):
        @self.app.get("/query")
        async def query_data():
            # Simulate database query latency
            time.sleep(random.uniform(0.01, 0.05))
            return {
                "service": "database_service",
                "query_time": time.time(),
                "records_available": len(self.data_store["users"]) + len(self.data_store["payments"])
            }
        
        @self.app.get("/users")
        async def get_users():
            time.sleep(random.uniform(0.01, 0.03))
            return {"users": self.data_store["users"]}
        
        @self.app.get("/payments")
        async def get_payments():
            time.sleep(random.uniform(0.01, 0.03))
            return {"payments": self.data_store["payments"]}
        
        @self.app.post("/users")
        async def create_user():
            time.sleep(random.uniform(0.02, 0.05))
            new_id = max([u["id"] for u in self.data_store["users"]], default=0) + 1
            new_user = {"id": new_id, "name": f"User{new_id}", "email": f"user{new_id}@example.com"}
            self.data_store["users"].append(new_user)
            return {"created": new_user}
        
        @self.app.post("/payments")
        async def create_payment():
            time.sleep(random.uniform(0.02, 0.05))
            new_id = max([p["id"] for p in self.data_store["payments"]], default=0) + 1
            new_payment = {"id": new_id, "user_id": 1, "amount": 25.0, "status": "pending"}
            self.data_store["payments"].append(new_payment)
            return {"created": new_payment}


if __name__ == "__main__":
    service = DatabaseService()
    service.run()

