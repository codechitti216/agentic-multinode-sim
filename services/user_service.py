# Auto-generated by Manus: Chaos Triage Arena scaffold

from base_service import BaseService
from fastapi import HTTPException


class UserService(BaseService):
    def __init__(self):
        super().__init__("user_service", 8003, ["database_service"])
        self._setup_user_routes()
    
    def _setup_user_routes(self):
        @self.app.get("/users")
        async def get_users():
            try:
                # Get users from database service
                users_data = self.call_dependency("database_service", "/users")
                return {
                    "service": "user_service",
                    "users": users_data.get("users", [])
                }
            except HTTPException as e:
                raise e
        
        @self.app.get("/validate")
        async def validate_user():
            try:
                # Check database connectivity
                db_status = self.call_dependency("database_service", "/query")
                return {
                    "service": "user_service",
                    "validation": "passed",
                    "database_status": db_status
                }
            except HTTPException as e:
                raise HTTPException(status_code=503, detail="User validation failed - database unavailable")
        
        @self.app.post("/create")
        async def create_user():
            try:
                # Create user via database service
                result = self.call_dependency("database_service", "/users")
                return {
                    "service": "user_service",
                    "operation": "create_user",
                    "result": result
                }
            except HTTPException as e:
                raise e
        
        @self.app.get("/profile/{user_id}")
        async def get_user_profile(user_id: int):
            try:
                # Get user data from database
                users_data = self.call_dependency("database_service", "/users")
                users = users_data.get("users", [])
                
                user = next((u for u in users if u["id"] == user_id), None)
                if not user:
                    raise HTTPException(status_code=404, detail="User not found")
                
                return {
                    "service": "user_service",
                    "user_profile": user
                }
            except HTTPException as e:
                raise e


if __name__ == "__main__":
    service = UserService()
    service.run()

