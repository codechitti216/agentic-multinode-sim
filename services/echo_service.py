# Auto-generated by Manus: Chaos Triage Arena scaffold

from base_service import BaseService
from fastapi import Request
import time
import json


class EchoService(BaseService):
    def __init__(self):
        super().__init__("echo_service", 8005, [])
        self._setup_echo_routes()
    
    def _setup_echo_routes(self):
        @self.app.get("/echo")
        async def echo_get():
            return {
                "service": "echo_service",
                "method": "GET",
                "timestamp": time.time(),
                "message": "Echo service is running"
            }
        
        @self.app.post("/echo")
        async def echo_post(request: Request):
            try:
                body = await request.json()
            except:
                body = {}
            
            return {
                "service": "echo_service",
                "method": "POST",
                "timestamp": time.time(),
                "echoed_data": body,
                "headers": dict(request.headers)
            }
        
        @self.app.get("/ping")
        async def ping():
            return {
                "service": "echo_service",
                "response": "pong",
                "timestamp": time.time()
            }
        
        @self.app.get("/info")
        async def info():
            return {
                "service": "echo_service",
                "description": "Simple echo service for testing",
                "endpoints": ["/echo", "/ping", "/info", "/healthz", "/status", "/metrics"],
                "timestamp": time.time()
            }
        
        @self.app.get("/load-test")
        async def load_test():
            # Simulate some work
            start_time = time.time()
            
            # Do some CPU work
            result = sum(i * i for i in range(10000))
            
            # Simulate I/O delay
            time.sleep(0.01)
            
            end_time = time.time()
            
            return {
                "service": "echo_service",
                "load_test_result": result,
                "processing_time": end_time - start_time,
                "timestamp": time.time()
            }


if __name__ == "__main__":
    service = EchoService()
    service.run()

